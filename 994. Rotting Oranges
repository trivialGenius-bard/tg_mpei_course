// https://leetcode.com/problems/rotting-oranges/

class Solution {
public:
    int orangesRotting(vector<vector<int>>& grid) {
        if(grid.empty()) return 0;
        int m = grid.size(), n = grid[0].size();
        queue<int> q;
        int cnt = 0;
        for(int i = 0; i < m; ++i) {
            for(int j = 0; j < n; ++j) {
                if(grid[i][j] == 2) {
                    q.push(i * n + j);
                }else if(grid[i][j] == 1) {
                    cnt++;
                }
            }
        }
        int ans = 0;
        if(cnt == 0) return ans;
        vector<vector<int>> dir = {{-1, 0}, {1, 0}, {0, 1}, {0, -1}};
        while (!q.empty()) {
            int s = q.size();
            ans++;
            for (int i = 0; i < s; ++i) {
                int f = q.front();
                for (auto d : dir) {
                    int ix = f / n + d[0], iy = f % n + d[1];
                    if (ix >= 0 && ix < m && iy >= 0 && iy < n && grid[ix][iy] == 1) {
                        cnt--;
                        grid[ix][iy] = 2;
                        q.push(ix * n + iy);
                    }
                }
                q.pop();
            }
        }
        return cnt == 0 ? ans - 1 : -1;
    }
};
