//https://leetcode.com/problems/top-k-frequent-elements/

class Solution {
public:
    vector<int> topKFrequent(vector<int>& nums, int k) {
        vector<int> topK;
        if (nums.size() == 0) {
            return topK;
        }
        vector<pair<int, int>> numVec;
        map<int, int> numMap;
        for(int num : nums) {
            if (numMap.count(num)) {
                numMap[num]++;
            } else {
                numMap[num] = 1;
            }
        }
        
        map<int, int>::iterator iter;
        iter = numMap.begin();
        while(iter != numMap.end()) {
            numVec.push_back(pair<int, int>(iter->second, iter->first));
            iter++;
        }
        int length = (int) numVec.size();
        for (int i = length / 2 - 1; i >= 0; i --) {
            sift(i, length - 1, numVec);
        }

        for (int i = length - 1; i > length - k - 1;  i --) {
            topK.push_back(numVec[0].second);
            swap(numVec[0], numVec[i]);
            sift(0, i - 1, numVec);
        }
        
        return topK;
    }
    
    void sift(int low, int high, vector<pair<int, int>> &numVec) {
        int i = low, j = 2 * i + 1;
        while (j <= high) {
            if (j < high && numVec[j].first < numVec[j+1].first) {
                j++;
            }
            
            if (numVec[i].first < numVec[j].first) {
                swap(numVec[i], numVec[j]);
                i = j;
                j = 2 * i + 1;
            } else {
                break;
            }
        }
    }

};
