// https://leetcode.com/problems/split-linked-list-in-parts/

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
   vector<ListNode*> splitListToParts(ListNode* root, int k) {
        if (!root) 
        {
            return std::vector<ListNode*>(k, root);
        }
        int len = 0;
        ListNode* root_copy = root;
        while (root_copy) // get list full length
        {
            ++len;
            root_copy = root_copy->next;
        }
        int part_len = len / k + ((len % k) > 0); // get length of the first part
        vector<ListNode*> ret{root};
        while (--part_len) // get the node before the last node of the first part
        {
            root = root->next;
        }
        ListNode* nxt = root->next;
        root->next = nullptr; // split the first part from second part
        vector<ListNode*> second_part = splitListToParts(nxt, k-1); // recursively
        ret.insert(ret.end(), second_part.begin(), second_part.end());
        return ret;
    }
};
